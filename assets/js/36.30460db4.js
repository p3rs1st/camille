(window.webpackJsonp=window.webpackJsonp||[]).push([[36],{320:function(a,t,s){"use strict";s.r(t);var e=s(10),v=Object(e.a)({},(function(){var a=this,t=a._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h1",{attrs:{id:"机制"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#机制"}},[a._v("#")]),a._v(" 机制")]),a._v(" "),t("p"),t("div",{staticClass:"table-of-contents"},[t("ul",[t("li",[t("a",{attrs:{href:"#泛型"}},[a._v("泛型")]),t("ul",[t("li",[t("a",{attrs:{href:"#泛型方法"}},[a._v("泛型方法")])]),t("li",[t("a",{attrs:{href:"#泛型上下限"}},[a._v("泛型上下限")])]),t("li",[t("a",{attrs:{href:"#泛型说明"}},[a._v("泛型说明")])])])]),t("li",[t("a",{attrs:{href:"#注解"}},[a._v("注解")]),t("ul",[t("li",[t("a",{attrs:{href:"#作用"}},[a._v("作用")])]),t("li",[t("a",{attrs:{href:"#分类"}},[a._v("分类")])])])]),t("li",[t("a",{attrs:{href:"#异常"}},[a._v("异常")])]),t("li",[t("a",{attrs:{href:"#反射"}},[a._v("反射")])]),t("li",[t("a",{attrs:{href:"#spi"}},[a._v("SPI")])])])]),t("p"),a._v(" "),t("h2",{attrs:{id:"泛型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#泛型"}},[a._v("#")]),a._v(" 泛型")]),a._v(" "),t("h3",{attrs:{id:"泛型方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#泛型方法"}},[a._v("#")]),a._v(" 泛型方法")]),a._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("T")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("T")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("getObject")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Class")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("T")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v(" c"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n  "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("T")]),a._v(" t "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" c"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("newInstance")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("return")]),a._v(" t"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br")])]),t("h3",{attrs:{id:"泛型上下限"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#泛型上下限"}},[a._v("#")]),a._v(" 泛型上下限")]),a._v(" "),t("ul",[t("li",[t("code",[a._v("<?>")]),a._v(": 无限制通配符")]),a._v(" "),t("li",[t("code",[a._v("<? extends E>")]),a._v(": 类型E或类型E的子类")]),a._v(" "),t("li",[t("code",[a._v("<? super E>")]),a._v(": 类型E或类型E的父类")]),a._v(" "),t("li",[t("code",[a._v("<? extends E & T>")]),a._v(": 同时多个限制")])]),a._v(" "),t("h3",{attrs:{id:"泛型说明"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#泛型说明"}},[a._v("#")]),a._v(" 泛型说明")]),a._v(" "),t("ul",[t("li",[a._v("泛型擦除: 无限制通配符替换为"),t("code",[a._v("Object")]),a._v(", 使用"),t("code",[a._v("extends T")]),a._v("时替换为"),t("code",[a._v("T")]),a._v(", 使用"),t("code",[a._v("super T")]),a._v("时替换为"),t("code",[a._v("Object")])]),a._v(" "),t("li",[a._v("泛型类中不能使用泛型类型声明静态变量和静态方法")]),a._v(" "),t("li",[a._v("异常中不能使用泛型")]),a._v(" "),t("li",[a._v("catch不能使用泛型")])]),a._v(" "),t("h2",{attrs:{id:"注解"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#注解"}},[a._v("#")]),a._v(" 注解")]),a._v(" "),t("h3",{attrs:{id:"作用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#作用"}},[a._v("#")]),a._v(" 作用")]),a._v(" "),t("ul",[t("li",[a._v("生成文档, 如javadoc")]),a._v(" "),t("li",[a._v("编译检查, 如@Override")]),a._v(" "),t("li",[a._v("编译时动态处理, 如动态生成代码")]),a._v(" "),t("li",[a._v("运行时动态处理, 如使用反射注入实例")])]),a._v(" "),t("h3",{attrs:{id:"分类"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#分类"}},[a._v("#")]),a._v(" 分类")]),a._v(" "),t("ul",[t("li",[t("code",[a._v("Java自带注解")]),a._v(": "),t("code",[a._v("@Override")]),a._v(", "),t("code",[a._v("@Deprecated")]),a._v(", "),t("code",[a._v("@SuppressWarnings")])]),a._v(" "),t("li",[t("code",[a._v("元注解")]),a._v(": 用于定义注解的注解, "),t("code",[a._v("@Retention")]),a._v("(注解被保留的阶段), "),t("code",[a._v("@Target")]),a._v("(注解使用的范围), "),t("code",[a._v("@Inherited")]),a._v("(父类注解可被子类继承), "),t("code",[a._v("@Documented")]),a._v("(是否生成javadoc)")]),a._v(" "),t("li",[t("code",[a._v("自定义注解")]),a._v(": 根据自己的需求定义注解")])]),a._v(" "),t("h2",{attrs:{id:"异常"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#异常"}},[a._v("#")]),a._v(" 异常")]),a._v(" "),t("ul",[t("li",[t("code",[a._v("Throwable")]),a._v(": 所有错误与异常的超类")]),a._v(" "),t("li",[t("code",[a._v("Error(错误)")]),a._v(": 无法处理, JVM将终止进程, 如内存溢出, 栈溢出")]),a._v(" "),t("li",[t("code",[a._v("Exception(异常)")]),a._v(": 可以捕获和处理的异常\n"),t("ul",[t("li",[a._v("RuntimeException(运行时异常): java编译器不检查(可查异常), 可不捕获")]),a._v(" "),t("li",[a._v("非运行时异常: 必须捕获")])])])]),a._v(" "),t("h2",{attrs:{id:"反射"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#反射"}},[a._v("#")]),a._v(" 反射")]),a._v(" "),t("blockquote",[t("p",[a._v("反射指将java类中各个成分映射为一个个java对象")])]),a._v(" "),t("ul",[t("li",[t("code",[a._v("Class类")]),a._v(": 表示一个java类\n"),t("ul",[t("li",[a._v("获取方式: 类名.class, 对象.getClass(), Class.forName(全限定类名)")])])]),a._v(" "),t("li",[t("code",[a._v("Constructor类")]),a._v(": Class对象表示的类的构造方法")]),a._v(" "),t("li",[t("code",[a._v("Field类")]),a._v(": 提供有关类或接口的单个字段信息, 以及动态访问权限, 可为类字段或实例字段")]),a._v(" "),t("li",[t("code",[a._v("Method类")]),a._v(": 提供有关类或接口的单独某个方法的信息, 可为类方法或实例方法")])]),a._v(" "),t("h2",{attrs:{id:"spi"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#spi"}},[a._v("#")]),a._v(" SPI")]),a._v(" "),t("blockquote",[t("p",[a._v("(Service Provider Interface), 服务提供发现机制, 为某个接口寻找服务实现")])]),a._v(" "),t("img",{attrs:{src:a.$withBase("/java/javaSpi.jpg"),alt:"javaSpi"}})])}),[],!1,null,null,null);t.default=v.exports}}]);