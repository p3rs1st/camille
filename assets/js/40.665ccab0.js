(window.webpackJsonp=window.webpackJsonp||[]).push([[40],{325:function(s,a,t){"use strict";t.r(a);var n=t(10),e=Object(n.a)({},(function(){var s=this,a=s._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"java库"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#java库"}},[s._v("#")]),s._v(" java库")]),s._v(" "),a("p"),a("div",{staticClass:"table-of-contents"},[a("ul",[a("li",[a("a",{attrs:{href:"#关键字"}},[s._v("关键字")]),a("ul",[a("li",[a("a",{attrs:{href:"#synchronized"}},[s._v("synchronized")])]),a("li",[a("a",{attrs:{href:"#volatile"}},[s._v("volatile")])]),a("li",[a("a",{attrs:{href:"#final"}},[s._v("final")])])])]),a("li",[a("a",{attrs:{href:"#基本类"}},[s._v("基本类")]),a("ul",[a("li",[a("a",{attrs:{href:"#unsafe"}},[s._v("Unsafe")])]),a("li",[a("a",{attrs:{href:"#原子类"}},[s._v("原子类")])]),a("li",[a("a",{attrs:{href:"#locksuppport"}},[s._v("LockSuppport")])]),a("li",[a("a",{attrs:{href:"#threadlocal"}},[s._v("ThreadLocal")])])])]),a("li",[a("a",{attrs:{href:"#基本接口"}},[s._v("基本接口")]),a("ul",[a("li",[a("a",{attrs:{href:"#condition"}},[s._v("Condition")])]),a("li",[a("a",{attrs:{href:"#lock"}},[s._v("Lock")])])])]),a("li",[a("a",{attrs:{href:"#源码细读"}},[s._v("源码细读")]),a("ul",[a("li",[a("a",{attrs:{href:"#锁核心类aqs-abstractqueuedsynchronizer"}},[s._v("锁核心类AQS(AbstractQueuedSynchronizer)")])]),a("li",[a("a",{attrs:{href:"#reentrantlock"}},[s._v("ReentrantLock")])]),a("li",[a("a",{attrs:{href:"#reentrantreadwritelock"}},[s._v("ReentrantReadWriteLock")])])])]),a("li",[a("a",{attrs:{href:"#线程池"}},[s._v("线程池")]),a("ul",[a("li",[a("a",{attrs:{href:"#线程池作用"}},[s._v("线程池作用")])]),a("li",[a("a",{attrs:{href:"#future接口"}},[s._v("Future接口")])]),a("li",[a("a",{attrs:{href:"#futuretask"}},[s._v("FutureTask")])]),a("li",[a("a",{attrs:{href:"#threadpoolexecutor"}},[s._v("ThreadPoolExecutor")])]),a("li",[a("a",{attrs:{href:"#forkjoinpool"}},[s._v("ForkJoinPool")])]),a("li",[a("a",{attrs:{href:"#countdownlatch"}},[s._v("CountDownLatch")])]),a("li",[a("a",{attrs:{href:"#cyclicbarrier"}},[s._v("CyclicBarrier")])]),a("li",[a("a",{attrs:{href:"#semaphore"}},[s._v("Semaphore")])]),a("li",[a("a",{attrs:{href:"#phaser"}},[s._v("Phaser")])]),a("li",[a("a",{attrs:{href:"#exchanger"}},[s._v("Exchanger")])])])])])]),a("p"),s._v(" "),a("h2",{attrs:{id:"关键字"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#关键字"}},[s._v("#")]),s._v(" 关键字")]),s._v(" "),a("h3",{attrs:{id:"synchronized"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#synchronized"}},[s._v("#")]),s._v(" synchronized")]),s._v(" "),a("ul",[a("li",[s._v("指定锁定对象: this, 某一对象, .class")]),s._v(" "),a("li",[s._v("修饰方法: 普通方法等价于this, 静态方法等价于.class")]),s._v(" "),a("li",[s._v("加锁原理: 用monitor计数器表示被执行线程重入次数, 当monitor为0表示未锁, 大于0表示被重入次数")]),s._v(" "),a("li",[s._v("缺点: 效率低, 不灵活, 无法得知是否成功获取锁")])]),s._v(" "),a("h3",{attrs:{id:"volatile"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#volatile"}},[s._v("#")]),s._v(" volatile")]),s._v(" "),a("ul",[a("li",[s._v("作用: 防止重排(有序性), 共享变量修改可见(可见性)")]),s._v(" "),a("li",[s._v("可见性实现: 使用lock前缀的指令, 使得线程缓存数据会写回主存, 且写回后其他线程缓存的该地址数据失效(缓存一致性协议, 嗅探协议)")]),s._v(" "),a("li",[s._v("有序性实现: happens-before原则, 编译volatile变量的指令时, JMM提供内存屏障防止特定类型的重排方式")])]),s._v(" "),a("h3",{attrs:{id:"final"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#final"}},[s._v("#")]),s._v(" final")]),s._v(" "),a("ul",[a("li",[s._v("final修饰的方法不可被重写, private方法默认为final")]),s._v(" "),a("li",[s._v("final修饰的变量运算时不会自动转换类型")]),s._v(" "),a("li",[s._v("static final: 必须在声明时赋值")]),s._v(" "),a("li",[s._v("blank final: 声明为final的参数可在构造器中赋值")]),s._v(" "),a("li",[s._v("重排规则: 禁止final域写重排到构造方法外, 禁止先读对象的final域再读对象的引用, 禁止先将final对象的引用赋值给引用变量再写入该对象")])]),s._v(" "),a("h2",{attrs:{id:"基本类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#基本类"}},[s._v("#")]),s._v(" 基本类")]),s._v(" "),a("h3",{attrs:{id:"unsafe"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#unsafe"}},[s._v("#")]),s._v(" Unsafe")]),s._v(" "),a("ul",[a("li",[s._v("作用: 访问管理底层资源")])]),s._v(" "),a("img",{attrs:{src:s.$withBase("/java/java-thread-x-atomicinteger-unsafe.png"),alt:"java-thread-x-atomicinteger-unsafe"}}),s._v(" "),a("h3",{attrs:{id:"原子类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#原子类"}},[s._v("#")]),s._v(" 原子类")]),s._v(" "),a("ul",[a("li",[a("code",[s._v("AtomicInteger, AtomicBoolean, AtomicLong, ...")]),s._v(": 用volatile的变量以及Unsafe类的CAS修改数据")]),s._v(" "),a("li",[a("code",[s._v("AtomicReference")]),s._v(": 原子更新引用类型, 即用于自定义类的原子操作, 但仅对类中volatile修饰的字段有用")]),s._v(" "),a("li",[a("code",[s._v("AtomicStampedReference")]),s._v(": AtomicReference基础上使用Pair存储元素和版本号, 解决ABA问题")]),s._v(" "),a("li",[a("code",[s._v("AtomicMarkableReference")]),s._v(": 维护boolean标记, 解决ABA问题")]),s._v(" "),a("li",[a("code",[s._v("AtomicIntegerFieldUpdater")]),s._v("(Boolean, Stamped, Reference): 利用反射的方法, 指定类中的字段, 进行原子的更新操作, 该类可以对同类下不同的实例操作, 但非updater的只能对一个实例操作")])]),s._v(" "),a("h3",{attrs:{id:"locksuppport"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#locksuppport"}},[s._v("#")]),s._v(" LockSuppport")]),s._v(" "),a("p",[s._v("用于创建锁和其他同步类的基本线程阻塞原语, 直接使用LockSupport的静态函数, 无法实例化LockSupport")]),s._v(" "),a("h4",{attrs:{id:"函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#函数"}},[s._v("#")]),s._v(" 函数")]),s._v(" "),a("ul",[a("li",[a("code",[s._v("(Unsafe) unsafe.park(boolean isAbsolute, long time)")]),s._v(": 阻塞线程, time = 0表示无穷长, isAbsolute表示是否为绝对时间(即时间戳还是时间长度)")]),s._v(" "),a("li",[a("code",[s._v("(Unsafe) unsafe.unpark(Thread thread)")]),s._v(": 释放线程许可")]),s._v(" "),a("li",[a("code",[s._v("LockSupport.park()")]),s._v(": 阻塞当前线程")]),s._v(" "),a("li",[a("code",[s._v("LockSupport.park(Object blocker)")]),s._v(": 阻塞当前线程, 标识blocker为等待对象, 该函数的实现中有两次"),a("code",[s._v("setBlocker")]),s._v(", 其中第二次"),a("code",[s._v("setBlocker")]),s._v("因"),a("code",[s._v("unsafe.park()")]),s._v("而阻塞, 只有当线程再次运行时才会进行第二次"),a("code",[s._v("setBlocker")])]),s._v(" "),a("li",[a("code",[s._v("LockSupport.parkNanos(Object blocker, long nanos)")]),s._v(": 阻塞当前线程至多nanos毫秒")]),s._v(" "),a("li",[a("code",[s._v("LockSupport.parkUntil(Object blocker, long deadline)")]),s._v(": 阻塞当前线程至多到deadline时间")]),s._v(" "),a("li",[a("code",[s._v("LockSupport.unpark(Thread thread)")]),s._v(": 给线程thread许可, 即解除thread阻塞, 若线程"),a("code",[s._v("unpark")]),s._v(", 后一次的"),a("code",[s._v("park")]),s._v("将直接跳过阻塞, 对指定线程执行"),a("code",[s._v("interrupt()")]),s._v("可以达到同样的效果")])]),s._v(" "),a("h4",{attrs:{id:"比较"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#比较"}},[s._v("#")]),s._v(" 比较")]),s._v(" "),a("ul",[a("li",[a("code",[s._v("Thread.sleep(), LockSupport.park()")]),s._v(": 不会释放占有锁")]),s._v(" "),a("li",[a("code",[s._v("Object.wait(), Condition.await()")]),s._v(": 均释放锁, 前者需要在synchronized块中使用, 后者底层调用LockSupport.park()实现阻塞")])]),s._v(" "),a("h3",{attrs:{id:"threadlocal"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#threadlocal"}},[s._v("#")]),s._v(" ThreadLocal")]),s._v(" "),a("p",[s._v("在不同的线程中创建独立的成员变量")]),s._v(" "),a("ul",[a("li",[s._v("如果希望ThreadLocal把某个类与线程关联起来, 则需用"),a("code",[s._v("private static")]),s._v("修饰ThreadLocal")]),s._v(" "),a("li",[s._v("实现原理为利用ThreadLocalMap记录线程对应的变量值, ThreadLocalMap用数组模拟map, 且Entry使用弱引用")]),s._v(" "),a("li",[s._v("线程池操作ThreadLocal时, 由于线程池不会销毁线程, ThreadLocal对应的对象不会被释放, 导致内存泄漏, 在线程结束前调用"),a("code",[s._v("ThreadLocal::remove")]),s._v("可以解决问题")])]),s._v(" "),a("h2",{attrs:{id:"基本接口"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#基本接口"}},[s._v("#")]),s._v(" 基本接口")]),s._v(" "),a("h3",{attrs:{id:"condition"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#condition"}},[s._v("#")]),s._v(" Condition")]),s._v(" "),a("p",[s._v("锁的条件加锁与释放")]),s._v(" "),a("ul",[a("li",[a("code",[s._v("await()")]),s._v(": 等待对应条件唤醒, 释放持有的锁资源")]),s._v(" "),a("li",[a("code",[s._v("awaitUninterruptibly()")]),s._v(": 即使线程被interrupted也要继续等待到条件唤醒")]),s._v(" "),a("li",[a("code",[s._v("awaitNanos(long), await(long, TimeUnit), awaitUntil(Date)")]),s._v(": "),a("code",[s._v("await()")]),s._v("限时版")]),s._v(" "),a("li",[a("code",[s._v("signal()")]),s._v(": 公平地唤醒一个等待线程, 将该线程加入AQS同步队列")]),s._v(" "),a("li",[a("code",[s._v("signalAll()")]),s._v(": 唤醒所有等待线程, 将所有线程加入AQS同步队列")])]),s._v(" "),a("h3",{attrs:{id:"lock"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#lock"}},[s._v("#")]),s._v(" Lock")]),s._v(" "),a("p",[s._v("JUC的锁接口")]),s._v(" "),a("ul",[a("li",[a("code",[s._v("lock()")]),s._v(": 获取锁")]),s._v(" "),a("li",[a("code",[s._v("lockInterruptibly()")]),s._v(": 获取锁, 但当线程interrupted时不再获取锁")]),s._v(" "),a("li",[a("code",[s._v("tryLock()")]),s._v(": 锁一旦空闲就尝试获取, 即非公平锁")]),s._v(" "),a("li",[a("code",[s._v("tryLock(long, TimeUnit)")]),s._v(": "),a("code",[s._v("tryLock()")]),s._v("限时版")]),s._v(" "),a("li",[a("code",[s._v("unlock()")]),s._v(": 释放锁")]),s._v(" "),a("li",[a("code",[s._v("newCondition()")]),s._v(": 获取一个绑定当前锁的Condition实例")])]),s._v(" "),a("h2",{attrs:{id:"源码细读"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#源码细读"}},[s._v("#")]),s._v(" 源码细读")]),s._v(" "),a("h3",{attrs:{id:"锁核心类aqs-abstractqueuedsynchronizer"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#锁核心类aqs-abstractqueuedsynchronizer"}},[s._v("#")]),s._v(" 锁核心类AQS(AbstractQueuedSynchronizer)")]),s._v(" "),a("p",[s._v("用来构建锁和同步器的框架, 基于CLH队列锁(虚拟的双向队列, 仅存在节点关联关系)")]),s._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// AbstractOwnableSynchronizer(AOS) 实现独占线程的保存和获取")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("abstract")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("AbstractQueuedSynchronizer")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("extends")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("AbstractOwnableSynchronizer")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// Node为同步队列或条件队列的节点")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("final")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Node")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 标记为共享模式节点")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("final")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Node")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("SHARED")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Node")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 标记为独占模式节点")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("final")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Node")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("EXCLUSIVE")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    \n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 节点状态")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("volatile")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" waitStatus"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/*\n    CANCELLED,  1, 线程已取消\n    SIGNAL,    -1, 线程释放锁后需唤醒后一线程\n    CONDITION, -2, 线程在条件队列中\n    PROPAGATE, -3, 线程后续的acquireShared可以执行\n             ,  0, 默认状态\n    非负状态表示节点不需要被signal, 负装填表示处于等待状态\n    */")]),s._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 前驱后继节点")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("volatile")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Node")]),s._v(" prev"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" next"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 当前节点对应线程")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("volatile")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Thread")]),s._v(" thread"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 条件队列中的下一节点")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Node")]),s._v(" nextWaiter"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 空构造函数表示节点为标记节点(SHARED)或头节点")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Node")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 其余非空构造函数除了构造相应参数, 还会将当前线程设置到thread")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 同步队列头尾节点")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("transient")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("volatile")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Node")]),s._v(" head"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" tail"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 同步状态, 0表示未被锁, 大于0表示被线程重入次数")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("volatile")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" state"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 同步队列为空时添加节点需要先添加一个头节点(即头节点不包含线程)")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// CAS将node加入同步队列, 失败后继续尝试, 返回前驱节点")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Node")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("enq")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Node")]),s._v(" node"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/*...*/")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 以给定模式新建节点以及当前线程加入同步队列, 返回新建节点")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Node")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("addWaiter")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Node")]),s._v(" node"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/*...*/")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 将node状态修改为0(除非已取消), 并LockSupport.unpark后继中第一个状态非取消的节点")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("unparkSuccessor")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Node")]),s._v(" node"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/*...*/")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 待子类实现的方法")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 独占方式尝试能否获取资源")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("protected")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("boolean")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("tryAcquire")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" arg"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 独占方式尝试能否释放资源")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("protected")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("boolean")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("tryRelease")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" arg"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 共享方式尝试能否获取资源, 返回值为剩余可用资源数")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("protected")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("tryAcquireShared")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" arg"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 共享方式尝试能否释放资源")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("protected")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("boolean")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("tryReleaseShared")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" arg"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 线程是否正在独占资源, 只有用到condition才需要实现")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("protected")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("boolean")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("isHeldExclusively")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 先tryAcquire获取资源, 失败后使用以独占形式加入同步队列并尝试用acquireQueued获取资源")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("final")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("acquire")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" arg"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/*...*/")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 先tryRelease尝试能否释放资源, 成功后若节点不是0状态则unparkSucessor(node)")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("final")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("boolean")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("release")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" arg"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/*...*/")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" \n\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 尝试在同步队列中获取资源, 尝试失败后用shouldParkAfterFailedAcquire判断是否需要暂停线程")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 若发生异常则cancelAcquire(node)取消对资源的获取请求并暂停线程")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("final")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("boolean")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("acquireQueued")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("final")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Node")]),s._v(" node"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" arg"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/*...*/")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 下面的函数与acquireQueued实现基本相同")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 区别为允许中途线程暂停时停止获取资源")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("doAcquireInterruptibly")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" arg"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/*...*/")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 获取资源有时间限制")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("boolean")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("doAcquireNanos")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" arg"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("long")]),s._v(" nanosTimeout"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/*...*/")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 获取共享资源有类似的函数*Shared* 但是具体实现为节点状态修改为PROPAGATE, 以及做一些共享模式下的传播")]),s._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 判断后去资源失败后是否需要暂停线程")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 如果前驱节点为头节点, 说明至多有一个线程正在占有资源")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 如果获取资源失败, 若前驱节点状态为SIGNAL, 则应当暂停线程待前驱节点唤醒")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 若前驱结点状态为取消, 则找到最近非取消前驱更新为新前驱, 继续尝试获取资源")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 若前驱结点状态为其他状态, 则更新前驱状态为SIGNAL, 因为添加了一个独占线程, 继续尝试获取资源")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("boolean")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("shouldParkAfterFailedAcquire")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Node")]),s._v(" pred"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Node")]),s._v(" node"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/*...*/")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 取消node获取资源的请求")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 将node状态改为CANCELLED, 若node为队尾则直接更新队列")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 否则如果node未被取消的最近前驱能修改为SIGNAL状态且不是头节点, 如果失败则说明可以让后续线程获取资源, unparkSucessor(node)")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("cancelAcquire")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Node")]),s._v(" node"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/*...*/")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 将条件队列中的节点退队(清除nextWaiter), 以默认状态添加到同步队列中, 返回是否操作成功")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 如果同步队列原末尾节点为已取消或修改为SIGNAL状态失败, 则唤醒node的线程, 是对await的优化")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("final")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("boolean")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("transferForSignal")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Node")]),s._v(" node"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/*...*/")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 条件队列 仅对独占模式有效")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ConditionObject")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("implements")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Condition")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 条件队列头尾节点")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("transient")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Node")]),s._v(" firstWaiter"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" lastWaiter"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    \n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 条件队列中添加新节点, 添加前若lastWaiter已取消则unlinkCancelledWaiters()")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Node")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("addConditionWaiter")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 将条件队列中所有已取消的节点删除, 节点的状态非CONDITION即为已取消")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("unlinkCancelledWaiters")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 唤醒条件队列第一个节点")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("doSignal")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Node")]),s._v(" first"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("final")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("signal")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 依次唤醒条件队列所有")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("doSignalAll")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Node")]),s._v(" first"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("final")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("signalAll")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 加入条件队列, 暂存state值, 释放锁资源, 当节点不在同步队列时阻塞")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 进入同步队列后acquireQueued尝试获取资源, 并且做线程中断的处理措施")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("final")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("await")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 不中断的await()")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("final")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("awaitUninterruptibly")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// await()限时版")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("final")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("long")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("awaitNanos")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("long")]),s._v(" nanosTimeout"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("final")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("boolean")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("awaitUntil")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Date")]),s._v(" deadline"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("final")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("boolean")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("await")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("long")]),s._v(" time"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("TimeUnit")]),s._v(" unit"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br"),a("span",{staticClass:"line-number"},[s._v("36")]),a("br"),a("span",{staticClass:"line-number"},[s._v("37")]),a("br"),a("span",{staticClass:"line-number"},[s._v("38")]),a("br"),a("span",{staticClass:"line-number"},[s._v("39")]),a("br"),a("span",{staticClass:"line-number"},[s._v("40")]),a("br"),a("span",{staticClass:"line-number"},[s._v("41")]),a("br"),a("span",{staticClass:"line-number"},[s._v("42")]),a("br"),a("span",{staticClass:"line-number"},[s._v("43")]),a("br"),a("span",{staticClass:"line-number"},[s._v("44")]),a("br"),a("span",{staticClass:"line-number"},[s._v("45")]),a("br"),a("span",{staticClass:"line-number"},[s._v("46")]),a("br"),a("span",{staticClass:"line-number"},[s._v("47")]),a("br"),a("span",{staticClass:"line-number"},[s._v("48")]),a("br"),a("span",{staticClass:"line-number"},[s._v("49")]),a("br"),a("span",{staticClass:"line-number"},[s._v("50")]),a("br"),a("span",{staticClass:"line-number"},[s._v("51")]),a("br"),a("span",{staticClass:"line-number"},[s._v("52")]),a("br"),a("span",{staticClass:"line-number"},[s._v("53")]),a("br"),a("span",{staticClass:"line-number"},[s._v("54")]),a("br"),a("span",{staticClass:"line-number"},[s._v("55")]),a("br"),a("span",{staticClass:"line-number"},[s._v("56")]),a("br"),a("span",{staticClass:"line-number"},[s._v("57")]),a("br"),a("span",{staticClass:"line-number"},[s._v("58")]),a("br"),a("span",{staticClass:"line-number"},[s._v("59")]),a("br"),a("span",{staticClass:"line-number"},[s._v("60")]),a("br"),a("span",{staticClass:"line-number"},[s._v("61")]),a("br"),a("span",{staticClass:"line-number"},[s._v("62")]),a("br"),a("span",{staticClass:"line-number"},[s._v("63")]),a("br"),a("span",{staticClass:"line-number"},[s._v("64")]),a("br"),a("span",{staticClass:"line-number"},[s._v("65")]),a("br"),a("span",{staticClass:"line-number"},[s._v("66")]),a("br"),a("span",{staticClass:"line-number"},[s._v("67")]),a("br"),a("span",{staticClass:"line-number"},[s._v("68")]),a("br"),a("span",{staticClass:"line-number"},[s._v("69")]),a("br"),a("span",{staticClass:"line-number"},[s._v("70")]),a("br"),a("span",{staticClass:"line-number"},[s._v("71")]),a("br"),a("span",{staticClass:"line-number"},[s._v("72")]),a("br"),a("span",{staticClass:"line-number"},[s._v("73")]),a("br"),a("span",{staticClass:"line-number"},[s._v("74")]),a("br"),a("span",{staticClass:"line-number"},[s._v("75")]),a("br"),a("span",{staticClass:"line-number"},[s._v("76")]),a("br"),a("span",{staticClass:"line-number"},[s._v("77")]),a("br"),a("span",{staticClass:"line-number"},[s._v("78")]),a("br"),a("span",{staticClass:"line-number"},[s._v("79")]),a("br"),a("span",{staticClass:"line-number"},[s._v("80")]),a("br"),a("span",{staticClass:"line-number"},[s._v("81")]),a("br"),a("span",{staticClass:"line-number"},[s._v("82")]),a("br"),a("span",{staticClass:"line-number"},[s._v("83")]),a("br"),a("span",{staticClass:"line-number"},[s._v("84")]),a("br"),a("span",{staticClass:"line-number"},[s._v("85")]),a("br"),a("span",{staticClass:"line-number"},[s._v("86")]),a("br"),a("span",{staticClass:"line-number"},[s._v("87")]),a("br"),a("span",{staticClass:"line-number"},[s._v("88")]),a("br"),a("span",{staticClass:"line-number"},[s._v("89")]),a("br"),a("span",{staticClass:"line-number"},[s._v("90")]),a("br"),a("span",{staticClass:"line-number"},[s._v("91")]),a("br"),a("span",{staticClass:"line-number"},[s._v("92")]),a("br"),a("span",{staticClass:"line-number"},[s._v("93")]),a("br"),a("span",{staticClass:"line-number"},[s._v("94")]),a("br"),a("span",{staticClass:"line-number"},[s._v("95")]),a("br"),a("span",{staticClass:"line-number"},[s._v("96")]),a("br"),a("span",{staticClass:"line-number"},[s._v("97")]),a("br"),a("span",{staticClass:"line-number"},[s._v("98")]),a("br"),a("span",{staticClass:"line-number"},[s._v("99")]),a("br"),a("span",{staticClass:"line-number"},[s._v("100")]),a("br"),a("span",{staticClass:"line-number"},[s._v("101")]),a("br"),a("span",{staticClass:"line-number"},[s._v("102")]),a("br"),a("span",{staticClass:"line-number"},[s._v("103")]),a("br"),a("span",{staticClass:"line-number"},[s._v("104")]),a("br"),a("span",{staticClass:"line-number"},[s._v("105")]),a("br"),a("span",{staticClass:"line-number"},[s._v("106")]),a("br"),a("span",{staticClass:"line-number"},[s._v("107")]),a("br"),a("span",{staticClass:"line-number"},[s._v("108")]),a("br"),a("span",{staticClass:"line-number"},[s._v("109")]),a("br"),a("span",{staticClass:"line-number"},[s._v("110")]),a("br"),a("span",{staticClass:"line-number"},[s._v("111")]),a("br"),a("span",{staticClass:"line-number"},[s._v("112")]),a("br"),a("span",{staticClass:"line-number"},[s._v("113")]),a("br"),a("span",{staticClass:"line-number"},[s._v("114")]),a("br"),a("span",{staticClass:"line-number"},[s._v("115")]),a("br"),a("span",{staticClass:"line-number"},[s._v("116")]),a("br"),a("span",{staticClass:"line-number"},[s._v("117")]),a("br"),a("span",{staticClass:"line-number"},[s._v("118")]),a("br"),a("span",{staticClass:"line-number"},[s._v("119")]),a("br"),a("span",{staticClass:"line-number"},[s._v("120")]),a("br"),a("span",{staticClass:"line-number"},[s._v("121")]),a("br")])]),a("h3",{attrs:{id:"reentrantlock"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#reentrantlock"}},[s._v("#")]),s._v(" ReentrantLock")]),s._v(" "),a("p",[s._v("可重入锁, 可选择公平锁或非公平锁的构造")]),s._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ReentrantLock")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("implements")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Lock")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 实现锁的具体机制")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("final")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Sync")]),s._v(" sync"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("abstract")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Sync")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("extends")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("AbstractQueuedSynchronizer")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 非公平尝试获取资源")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 当前线程直接尝试获取资源, 如果失败再排入同步队列")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("final")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("boolean")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("nonfairTryAcquire")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" acquires"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 获取当前资源的独占线程")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("final")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Thread")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("getOwner")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 返回状态state大小")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("final")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("getHoldCount")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 非公平锁, 用Sync中的nonfairTryAcquire实现tryAcquire")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("final")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("NonfairSync")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("extends")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Sync")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 公平锁, 新线程仅当同步队列为空时可以获取资源, 否则让队首线程先获取资源")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("final")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("FairSync")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("extends")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Sync")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br")])]),a("h3",{attrs:{id:"reentrantreadwritelock"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#reentrantreadwritelock"}},[s._v("#")]),s._v(" ReentrantReadWriteLock")]),s._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 接口ReadWriteLock要求实现返回读锁和写锁")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ReentrantReadWriteLock")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("implements")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ReadWriteLock")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("abstract")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Sync")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("extends")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("AbstractQueuedSynchronizer")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 高16位为读锁, 低16位为写锁")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 占有读锁线程数")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("sharedCount")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" c"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 占有写锁线程数")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("exclusiveCount")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" c"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 记录每一个读线程的读锁占用数")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("final")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("HoldCounter")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 每一个线程单独的记录")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("final")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ThreadLocalHoldCounter")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("extends")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ThreadLocal")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("HoldCounter")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("transient")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ThreadLocalHoldCounter")]),s._v(" readHolds"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 缓存上一线程的readHolds")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("transient")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("HoldCounter")]),s._v(" cachedHoldCounter"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 第一个读线程 以及占用读锁数")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("transient")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Thread")]),s._v(" firstReader"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("transient")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" firstReaderHoldCount"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 释放写锁, 返回是否完全释放写锁资源")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("protected")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("final")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("boolean")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("tryRelease")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" releases"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 获取写锁, 若当前为读锁或非当前线程占有写锁则失败, 若当前无锁但写锁需要阻塞则失败")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("protected")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("final")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("boolean")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("tryAcquire")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" acquires"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 释放读锁, 根据情况修改相应的变量")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("protected")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("final")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("boolean")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("tryReleaseShared")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" unused"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 获取读锁, 若是当前线程有写锁或仅有读锁, 允许获取")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 若是读锁需要阻塞或修改读锁数失败, 则fullTryAcquireShared(Thread)重复尝试修改读锁数")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("protected")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("final")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("tryAcquireShared")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" unused"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 尝试获取读锁或写锁, 无需考虑公平阻塞问题的tryAcquire和tryAcquireShared")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("final")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("boolean")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("tryReadLock")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("final")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("boolean")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("tryWriteLock")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 非公平锁, 写锁无需阻塞, 读锁当同步队列中第一个有效请求为独占模式")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("final")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("NonfairSync")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("extends")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Sync")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 公平锁, 同步队列的前驱中有有效请求则读锁写锁需要阻塞")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("final")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("FairSync")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("extends")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Sync")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n  \n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br"),a("span",{staticClass:"line-number"},[s._v("36")]),a("br"),a("span",{staticClass:"line-number"},[s._v("37")]),a("br"),a("span",{staticClass:"line-number"},[s._v("38")]),a("br"),a("span",{staticClass:"line-number"},[s._v("39")]),a("br"),a("span",{staticClass:"line-number"},[s._v("40")]),a("br"),a("span",{staticClass:"line-number"},[s._v("41")]),a("br")])]),a("h2",{attrs:{id:"线程池"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#线程池"}},[s._v("#")]),s._v(" 线程池")]),s._v(" "),a("h3",{attrs:{id:"线程池作用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#线程池作用"}},[s._v("#")]),s._v(" 线程池作用")]),s._v(" "),a("ul",[a("li",[s._v("降低资源消耗, 线程的创建与销毁")]),s._v(" "),a("li",[s._v("提高响应速度, 无需创建线程")]),s._v(" "),a("li",[s._v("提高线程的可管理性")])]),s._v(" "),a("h3",{attrs:{id:"future接口"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#future接口"}},[s._v("#")]),s._v(" Future接口")]),s._v(" "),a("ul",[a("li",[a("code",[s._v("cancel(boolean)")]),s._v(": 取消异步任务执行, 返回此次取消是否成功. 若任务正在执行, 参数为true时立刻中断任务且返回true, 参数为false时不会中断任务且返回true")]),s._v(" "),a("li",[a("code",[s._v("isCanceled()")]),s._v(": 判断任务是否取消")]),s._v(" "),a("li",[a("code",[s._v("isDone()")]),s._v(": 判断任务是否完成, 正常结束或发生异常均为完成")]),s._v(" "),a("li",[a("code",[s._v("get()")]),s._v(": 阻塞式获取任务结果")]),s._v(" "),a("li",[a("code",[s._v("get(long, Timeunit)")]),s._v(": "),a("code",[s._v("get()")]),s._v("限时版")])]),s._v(" "),a("h3",{attrs:{id:"futuretask"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#futuretask"}},[s._v("#")]),s._v(" FutureTask")]),s._v(" "),a("ul",[a("li",[a("p",[s._v("实现"),a("code",[s._v("Future")]),s._v("和"),a("code",[s._v("Runnable")])])]),s._v(" "),a("li",[a("p",[s._v("将任务分为7个状态, 其中最终态有"),a("code",[s._v("NORMAL, EXCEPTIONAL, CANCELLED, INTERRUPTED")])]),s._v(" "),a("ol",{attrs:{start:"0"}},[a("li",[a("code",[s._v("NEW")]),s._v(": 新任务")]),s._v(" "),a("li",[a("code",[s._v("COMPLETING")]),s._v(": 执行完成但未保存结果或异常结果")]),s._v(" "),a("li",[a("code",[s._v("NORMAL")]),s._v(": 执行完成且保存结果")]),s._v(" "),a("li",[a("code",[s._v("EXCEPTIONAL")]),s._v(": 执行完成且保存异常结果")]),s._v(" "),a("li",[a("code",[s._v("CANCELLED")]),s._v(": 被用户调用"),a("code",[s._v("cancel()")]),s._v("而取消")]),s._v(" "),a("li",[a("code",[s._v("INTERRUPTING")]),s._v(": 正在中断任务")]),s._v(" "),a("li",[a("code",[s._v("INTERRUPTED")]),s._v(": 任务已中断")])])])]),s._v(" "),a("h3",{attrs:{id:"threadpoolexecutor"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#threadpoolexecutor"}},[s._v("#")]),s._v(" ThreadPoolExecutor")]),s._v(" "),a("p",[s._v("线程集合workerSet和阻塞队列workQueue, 用户向线程池提交任务时先放入workQueue, 然后workerSet从workQueue中获取任务然后执行, 若workQueue中没有任务, worker阻塞")]),s._v(" "),a("p",[a("strong",[s._v("构造函数")]),s._v(":")]),s._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ThreadPoolExecutor")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" corePoolSize"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n                            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" maximumPoolSize"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n                            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("long")]),s._v(" keepAliveTime"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n                            "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("TimeUnit")]),s._v(" unit"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n                            "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("BlockingQueue")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Runnable")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" workQueue"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n                            "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ThreadFactory")]),s._v(" threadFactory"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n                            "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("RejectedExecutionHandler")]),s._v(" handler"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("ul",[a("li",[a("code",[s._v("corePoolSize")]),s._v(": 线程池核心线程数, 允许最大并行数")]),s._v(" "),a("li",[a("code",[s._v("maximumPoolSize")]),s._v(": 线程池允许的最多线程数, 只有当阻塞队列时有界队列时有效")]),s._v(" "),a("li",[a("code",[s._v("workQueue")]),s._v(": 等待被执行任务的阻塞队列, 使用"),a("code",[s._v("BlockingQueue")]),s._v("子类")]),s._v(" "),a("li",[a("code",[s._v("keepAliveTime")]),s._v(": 非核心线程的存活时间")]),s._v(" "),a("li",[a("code",[s._v("unit")]),s._v(": "),a("code",[s._v("keepAliveTime")]),s._v("单位")]),s._v(" "),a("li",[a("code",[s._v("threadFactory")]),s._v(": 可选, 创建线程的工厂, 默认DefaultThreadFactory")]),s._v(" "),a("li",[a("code",[s._v("handler")]),s._v(": 线程池饱和策略, 阻塞队列满时如何处理新任务, 可使用已有策略, 或自定义策略\n"),a("ul",[a("li",[a("code",[s._v("AbortPolicy")]),s._v(": 默认, 抛出异常")]),s._v(" "),a("li",[a("code",[s._v("CallerRunsPolicy")]),s._v(": 使用调用者所在线程执行任务")]),s._v(" "),a("li",[a("code",[s._v("DiscardOldestPolicy")]),s._v(": 丢弃阻塞队列中最靠前任务")]),s._v(" "),a("li",[a("code",[s._v("DiscardPolicy")]),s._v(": 丢弃任务")])])])]),s._v(" "),a("p",[a("strong",[s._v("线程数说明")]),s._v(":")]),s._v(" "),a("ul",[a("li",[a("code",[s._v("任务数<=corePoolSize")]),s._v(": 由核心线程处理任务")]),s._v(" "),a("li",[a("code",[s._v("corePoolSize<任务数<=(corePoolSize+workQueue.size())")]),s._v(": 所有核心线程处理任务, 剩下任务放入阻塞队列")]),s._v(" "),a("li",[a("code",[s._v("(corePoolSize+workQueue.size())<任务数<=(maximumPoolSize+workQueue.size())")]),s._v(": 先给满核心线程, 再给满阻塞队列, 剩下的由非核心线程直接执行")]),s._v(" "),a("li",[a("code",[s._v("任务数>(maximumPoolSize+workQueue.size())")]),s._v(": 处理完"),a("code",[s._v("(maximumPoolSize+workQueue.size())")]),s._v("个线程, 剩下任务根据"),a("code",[s._v("handler")]),s._v("处理")])]),s._v(" "),a("h4",{attrs:{id:"executors创建"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#executors创建"}},[s._v("#")]),s._v(" Executors创建")]),s._v(" "),a("ul",[a("li",[a("code",[s._v("newFixedThreadPool(int nThreads)")]),s._v(": 核心线程和最大线程设为nThreads, 阻塞队列为无界队列")]),s._v(" "),a("li",[a("code",[s._v("newSingleThreadExecutor()")]),s._v(": "),a("code",[s._v("newFixedThreadPool(1)")])]),s._v(" "),a("li",[a("code",[s._v("newCachedThreadPool()")]),s._v(": 无核心线程, 线程池大小INT_MAX, 有空闲线程则取任务执行, 否则新建, 执行完任务的线程有60秒存活时间, 使用"),a("code",[s._v("SynchronousQueue")]),s._v("为阻塞队列")]),s._v(" "),a("li",[a("code",[s._v("newScheduledThreadPoolExecutor(int corePoolSize)")]),s._v(": 为任务提供延迟或周期执行, 用"),a("code",[s._v("ScheduledFutureTask")]),s._v("实现可延迟的异步计算任务, 用"),a("code",[s._v("DelayedWorkQueue")]),s._v("实现存放周期或延时任务的延迟优先队列")])]),s._v(" "),a("p",[a("strong",[s._v("不推荐原因")]),s._v(":")]),s._v(" "),a("ul",[a("li",[a("code",[s._v("newFixedThreadPool")]),s._v("和"),a("code",[s._v("newSingleThreadExecutor")]),s._v(": 阻塞队列无上限可能导致OOM")]),s._v(" "),a("li",[a("code",[s._v("newCachedThreadPool")]),s._v("和"),a("code",[s._v("newScheduledThreadPool")]),s._v(": 线程池线程数最大为INT_MAX, 可能导致OOM")])]),s._v(" "),a("h4",{attrs:{id:"关闭线程池"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#关闭线程池"}},[s._v("#")]),s._v(" 关闭线程池")]),s._v(" "),a("ul",[a("li",[a("code",[s._v("shutdown")]),s._v(": 将线程池状态设为SHUTDOWN, 中断所有没有执行任务的线程")]),s._v(" "),a("li",[a("code",[s._v("shutdownNow")]),s._v(": 将线程池状态设为STOP, 停止所有正在执行或暂停任务的线程")]),s._v(" "),a("li",[a("code",[s._v("isShutDown")]),s._v(": 表示是否调用过关闭函数")]),s._v(" "),a("li",[a("code",[s._v("isTerminated")]),s._v(": 表示所有任务是否都关闭")])]),s._v(" "),a("h4",{attrs:{id:"源码分析"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#源码分析"}},[s._v("#")]),s._v(" 源码分析")]),s._v(" "),a("ul",[a("li",[a("code",[s._v("ctl: AtomicInteger")]),s._v(": 高3位存放线程池状态, 其余存放运行的worker数量\n"),a("ul",[a("li",[a("code",[s._v("RUNNING: 111")]),s._v(": 接受新任务, 处理阻塞队列任务")]),s._v(" "),a("li",[a("code",[s._v("SHUTDOWN: 000")]),s._v(": 不接受新任务, 处理阻塞队列任务")]),s._v(" "),a("li",[a("code",[s._v("STOP: 001")]),s._v(": 不接受新任务, 不处理阻塞队列任务, 中断正在运行任务")]),s._v(" "),a("li",[a("code",[s._v("TIDYING: 010")]),s._v(": 所有任务已终止")]),s._v(" "),a("li",[a("code",[s._v("TERMINATED: 011")]),s._v(": "),a("code",[s._v("terminated()")]),s._v("方法完成")])])]),s._v(" "),a("li",[s._v("任务执行: "),a("code",[s._v("execute")]),s._v("决定拒绝任务或接受任务, "),a("code",[s._v("addWorker")]),s._v("创建线程并执行任务, "),a("code",[s._v("getTask")]),s._v("从阻塞队列获取任务")]),s._v(" "),a("li",[s._v("任务提交: 使用"),a("code",[s._v("submit()")]),s._v("提交任务, 拿到返回的"),a("code",[s._v("Future")]),s._v("来获得线程结果")])]),s._v(" "),a("h3",{attrs:{id:"forkjoinpool"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#forkjoinpool"}},[s._v("#")]),s._v(" ForkJoinPool")]),s._v(" "),a("ul",[a("li",[s._v("将大任务拆成多个小任务来异步执行的工具, 从java7开始")]),s._v(" "),a("li",[s._v("两大思想: 分治, 工作窃取(work-stealing, 工作线程优先处理自身队列任务, 然后随机窃取其他队列任务)")]),s._v(" "),a("li",[s._v("概要: "),a("code",[s._v("ForkJoinPool")]),s._v("通过池中的"),a("code",[s._v("ForkJoinWorkerThread")]),s._v("处理"),a("code",[s._v("ForkJoinTask<T>")]),s._v("任务(包括子类"),a("code",[s._v("RecursiveTask")]),s._v(", "),a("code",[s._v("RecursiveAction")]),s._v("和"),a("code",[s._v("CountedCompleter")]),s._v(")\n"),a("ul",[a("li",[a("code",[s._v("RecursiveTask")]),s._v(": 可递归执行的有返回值的"),a("code",[s._v("RecursiveTask")])]),s._v(" "),a("li",[a("code",[s._v("RecursiveAction")]),s._v(": 无返回值的"),a("code",[s._v("RecursiveTask")])]),s._v(" "),a("li",[a("code",[s._v("CountedCompleter")]),s._v(": 任务完成后或发生异常后触发自定义函数")])])])]),s._v(" "),a("p",[a("strong",[s._v("构造函数")]),s._v(":")]),s._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ForkJoinPool")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" parallelism"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 并行度, 默认CPU数")]),s._v("\n                    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ForkJoinWorkerThreadFactory")]),s._v(" factory"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 工作线程工厂")]),s._v("\n                    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("UncaughtExceptionHandler")]),s._v(" handler"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 异常处理类")]),s._v("\n                    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("boolean")]),s._v(" asyncMode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 是否异步, 默认false")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("ul",[a("li",[a("code",[s._v("invoke(ForkJoinTask)")]),s._v(": 等待任务计算完毕并返回结果")]),s._v(" "),a("li",[a("code",[s._v("execute(ForkJoinTask)")]),s._v(": 提交异步任务, 无返回值")]),s._v(" "),a("li",[a("code",[s._v("submit(ForkJoinTask)")]),s._v(": 异步执行, 之后通过"),a("code",[s._v("ForkJoinTask.get()")]),s._v("阻塞等待结果")]),s._v(" "),a("li",[a("code",[s._v("ForkJoinTask.fork()")]),s._v(": 提交子任务, 分割任务")]),s._v(" "),a("li",[a("code",[s._v("ForkJoinTask.join()")]),s._v(": 获取子任务结果, 合并任务")]),s._v(" "),a("li",[a("code",[s._v("ForkJoinTask.invoke()")]),s._v(": 执行任务并等待结果")])]),s._v(" "),a("h3",{attrs:{id:"countdownlatch"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#countdownlatch"}},[s._v("#")]),s._v(" CountDownLatch")]),s._v(" "),a("ul",[a("li",[s._v("内部有实现AQS的成员")]),s._v(" "),a("li",[s._v("用于协调多线程之间的同步, 起到线程间简单通信作用, 部分线程调用"),a("code",[s._v("countDown()")]),s._v("使得计数器减1, 部分线程调用"),a("code",[s._v("await()")]),s._v("等待计数器为0结束时结束阻塞")]),s._v(" "),a("li",[a("code",[s._v("public CountDownLatch(int count)")]),s._v(": 构造给定计数初始化为count")]),s._v(" "),a("li",[s._v("2种典型用法\n"),a("ol",[a("li",[s._v("某一线程运行前需要等待n个线程完成, 初始化"),a("code",[s._v("CountDownLatch(int n)")]),s._v(", n个线程执行"),a("code",[s._v("countDown()")]),s._v(", 唯一线程执行"),a("code",[s._v("await()")])]),s._v(" "),a("li",[s._v("实行多线程开始执行任务的最大并行度, 初始化"),a("code",[s._v("CountDownLatch(1)")]),s._v(", 一个线程执行"),a("code",[s._v("countDown()")]),s._v(", 多个线程执行"),a("code",[s._v("await()")])])])])]),s._v(" "),a("h3",{attrs:{id:"cyclicbarrier"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cyclicbarrier"}},[s._v("#")]),s._v(" CyclicBarrier")]),s._v(" "),a("ul",[a("li",[s._v("内部有实现AQS的成员")]),s._v(" "),a("li",[s._v("让所有线程均完成后(执行到"),a("code",[s._v("CyclicBarrier.await()")]),s._v("), 所有线程才能够进行下一步操作")]),s._v(" "),a("li",[a("code",[s._v("public CyclicBarrier(int parties, Runnable barrieraction)")]),s._v(": "),a("code",[s._v("parties")]),s._v("表示参与的线程数, "),a("code",[s._v("barrieraction")]),s._v("表示最后一个完成的线程要做的操作")]),s._v(" "),a("li",[a("code",[s._v("await()")]),s._v(": 表示已经完成一部分, 需等待其他线程完成, 内部使用"),a("code",[s._v("doWait()")]),s._v("实现, 所有任务均完成后使用"),a("code",[s._v("nextGeneration()")]),s._v("重置屏障")])]),s._v(" "),a("h3",{attrs:{id:"semaphore"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#semaphore"}},[s._v("#")]),s._v(" Semaphore")]),s._v(" "),a("ul",[a("li",[s._v("信号量")]),s._v(" "),a("li",[a("code",[s._v("public Semaphore(int permits, boolean fair)")]),s._v(": "),a("code",[s._v("permits")]),s._v("初始许可数, "),a("code",[s._v("fair")]),s._v("是否公平")]),s._v(" "),a("li",[a("code",[s._v("acquire()")]),s._v(": 阻塞式获取一个许可")]),s._v(" "),a("li",[a("code",[s._v("tryAcquire()")]),s._v(": 尝试获取一个许可, 返回是否成功")]),s._v(" "),a("li",[a("code",[s._v("release()")]),s._v(": 释放一个许可")])]),s._v(" "),a("h3",{attrs:{id:"phaser"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#phaser"}},[s._v("#")]),s._v(" Phaser")]),s._v(" "),a("ul",[a("li",[a("code",[s._v("CyclicBarrier")]),s._v("可以动态修改"),a("code",[s._v("party")]),s._v("且能控制是否阻塞版")]),s._v(" "),a("li",[a("code",[s._v("register()")]),s._v(": 注册一个新的"),a("code",[s._v("party")])]),s._v(" "),a("li",[a("code",[s._v("bulkRegister(int parties)")]),s._v(": 批量注册"),a("code",[s._v("party")])]),s._v(" "),a("li",[a("code",[s._v("arrive()")]),s._v(": 到达且不等待其他任务到达, 返回"),a("code",[s._v("phase number")])]),s._v(" "),a("li",[a("code",[s._v("arriveAndDeregister()")]),s._v(": 到达并取消注册, 返回"),a("code",[s._v("phase number")])]),s._v(" "),a("li",[a("code",[s._v("arriveAndAwaitAdvance()")]),s._v(": 到达且等待其他任务到达, 返回"),a("code",[s._v("phase number")])]),s._v(" "),a("li",[a("code",[s._v("awaitAdvance(int phase)")]),s._v(": 阻塞到当前"),a("code",[s._v("phaser")]),s._v("变为"),a("code",[s._v("phase")])]),s._v(" "),a("li",[a("code",[s._v("state")]),s._v(": 低16位表示未到达"),a("code",[s._v("parties")]),s._v("数, 中16-31位表示等待的"),a("code",[s._v("parties")]),s._v("数, 中32-62位表示"),a("code",[s._v("phase number")]),s._v("当前代(每到达1次加1), 63位表示当前"),a("code",[s._v("phaser")]),s._v("的终止状态")])]),s._v(" "),a("h3",{attrs:{id:"exchanger"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#exchanger"}},[s._v("#")]),s._v(" Exchanger")]),s._v(" "),a("ul",[a("li",[s._v("两个线程之间交换数据, 第一个到达的线程在slot中放入数据, 阻塞等待, 第二个线程到达后读取存入数据, 交换数据, 唤醒第一个线程")]),s._v(" "),a("li",[a("code",[s._v("V exchange(V x)")]),s._v(": "),a("code",[s._v("x")]),s._v("为要交换的数据, 返回值为交换得到的数据")]),s._v(" "),a("li",[s._v("内部使用"),a("code",[s._v("arena")]),s._v("数组降低竞争")])])])}),[],!1,null,null,null);a.default=e.exports}}]);